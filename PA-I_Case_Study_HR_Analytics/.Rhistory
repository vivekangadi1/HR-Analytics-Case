iris
view(iris)
View(iris)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
install.packages("tidyr")
remove.packages(keras)
remove.packages("keras")
library(keras)
install.packages("keras")
install.packages("keras")
library(keras)
install_keras()
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
system("python --version")
setwd("D:\\ml\\R\\HRAnalytics\\PA-I_Case_Study_HR_Analytics")
pkgs <- c("keras", "lime", "tidyquant", "rsample", "recipes", "yardstick", "corrr")
library(keras)
library(lime)
library(tidyquant)
library(rsample)
library(recipes)
library(yardstick)
library(corrr)
library(tidyr)
library(stringr)
library(ggplot2)
library(car)
library(reshape2)
library(dplyr)
library(caret)
library(caTools)
library(MASS)
library(e1071)
manager <- read.csv("manager_survey_data.csv",stringsAsFactors=F)
general <- read.csv("general_data.csv",stringsAsFactors=F)
intime <- read.csv("in_time.csv",stringsAsFactors=F)
employee <- read.csv("employee_survey_data.csv",stringsAsFactors=F)
library(cowplot)
library(lubridate)
outtime <- read.csv("out_time.csv",stringsAsFactors=F)
str(employee)
str(manager)
str(general)
str(intime)
str(outtime)
colnames(intime)[1]<-"EmployeeID"
colnames(outtime)[1]<-"EmployeeID"
sum(duplicated(employee$EmployeeID))
sum(duplicated(manager$EmployeeID))
sum(duplicated(general$EmployeeID))
sum(duplicated(intime$EmployeeID))
sum(duplicated(outtime$EmployeeID))
sapply(employee, function(x) length(which(x == '')))
sapply(manager, function(x) length(which(x == '')))
sapply(general, function(x) length(which(x == '')))
sapply(intime, function(x) length(which(x == '')))
sapply(outtime, function(x) length(which(x == '')))
sapply(employee, function(x) length(which(is.na(x))))
sapply(manager, function(x) length(which(is.na(x))))
sapply(general, function(x) length(which(is.na(x))))
sapply(intime, function(x) length(which(is.na(x))))
sapply(outtime, function(x) length(which(is.na(x))))
employee$EnvironmentSatisfaction[which(is.na(employee$EnvironmentSatisfaction))]<-median(employee$EnvironmentSatisfaction,na.rm = TRUE)
employee$JobSatisfaction[which(is.na(employee$JobSatisfaction))]<-median(employee$JobSatisfaction,na.rm = TRUE)
employee$WorkLifeBalance[which(is.na(employee$WorkLifeBalance))]<-median(employee$WorkLifeBalance,na.rm = TRUE)
general$TotalWorkingYears[which(is.na(general$TotalWorkingYears))]<-mean(general$TotalWorkingYears,na.rm = TRUE)
employee <- employee[,colSums(is.na(employee))<nrow(employee)]
general <- general[,colSums(is.na(general))<nrow(general)]
general[,sapply(general, is.character)] <- lapply(general[,sapply(general, is.character)], as.factor)
manager <- manager[,colSums(is.na(manager))<nrow(manager)]
general$NumCompaniesWorked[which(is.na(general$NumCompaniesWorked))]<-mean(general$NumCompaniesWorked,na.rm = TRUE)
general <- general[ , -c(8,16)]
general <- general[ , -c(16)]
setdiff(employee$EmployeeID,general$EmployeeID)
setdiff(manager$EmployeeID,general$EmployeeID)
general$Education[which(general$Education==1)] <- "Below College"
general$Education[which(general$Education==2)] <- "College"
general$Education[which(general$Education==3)] <- "Bachelor"
setdiff(outtime$EmployeeID,general$EmployeeID)
setdiff(intime$EmployeeID,general$EmployeeID)
general$Education[which(general$Education==4)] <- "Master"
general$Education[which(general$Education==5)] <- "Doctor"
general$Education <- as.factor(general$Education)
employee$EnvironmentSatisfaction[which(employee$EnvironmentSatisfaction==1)] <- "Low"
employee$EnvironmentSatisfaction[which(employee$EnvironmentSatisfaction==4)] <- "Very High"
employee$EnvironmentSatisfaction <- as.factor(employee$EnvironmentSatisfaction)
employee$JobSatisfaction[which(employee$JobSatisfaction==1)] <- "Low"
employee$JobSatisfaction[which(employee$JobSatisfaction==2)] <- "Medium"
employee$JobSatisfaction <- as.factor(employee$JobSatisfaction)
employee$JobSatisfaction[which(employee$JobSatisfaction==3)] <- "High"
employee$EnvironmentSatisfaction[which(employee$EnvironmentSatisfaction==2)] <- "Medium"
employee$JobSatisfaction[which(employee$JobSatisfaction==4)] <- "Very High"
employee$EnvironmentSatisfaction[which(employee$EnvironmentSatisfaction==3)] <- "High"
employee$WorkLifeBalance[which(employee$WorkLifeBalance==1)] <- "Bad"
employee$WorkLifeBalance[which(employee$WorkLifeBalance==2)] <- "Good"
employee$WorkLifeBalance[which(employee$WorkLifeBalance==3)] <- "Better"
employee$WorkLifeBalance[which(employee$WorkLifeBalance==4)] <- "Best"
employee$WorkLifeBalance <- as.factor(employee$WorkLifeBalance)
manager$JobInvolvement[which(manager$JobInvolvement==1)] <- "Low"
manager$JobInvolvement[which(manager$JobInvolvement==2)] <- "Medium"
manager$JobInvolvement[which(manager$JobInvolvement==3)] <- "High"
manager$JobInvolvement[which(manager$JobInvolvement==4)] <- "Very High"
manager$JobInvolvement <- as.factor(manager$JobInvolvement)
manager$PerformanceRating[which(manager$PerformanceRating==1)] <- "Low"
manager$PerformanceRating[which(manager$PerformanceRating==2)] <- "Good"
manager$PerformanceRating[which(manager$PerformanceRating==3)] <- "Excellent"
manager$PerformanceRating[which(manager$PerformanceRating==4)] <- "Outstanding"
manager$PerformanceRating <- as.factor(manager$PerformanceRating)
hrdata <- merge(general, employee, by="EmployeeID")
hrdata <- merge(hrdata, manager, by="EmployeeID")
sum(is.na(employee$JobSatisfaction))
sum(is.na(manager$JobInvolvement))
missing_values_intime <- intime %>% summarise_all(funs(sum(is.na(.))/n()))
missing_values_intime <- gather(missing_values_intime,key='feature',value = 'missing_percentage')
missing_values_outtime <- outtime %>% summarise_all(funs(sum(is.na(.))/n()))
sum(is.na(hrdata))
sum(is.na(employee$WorkLifeBalance))
missing_values_outtime <- gather(missing_values_outtime,key='feature',value = 'missing_percentage')
intime_clean_cols <- filter(missing_values_intime,missing_percentage<0.15)
outtime_clean_cols <- filter(missing_values_outtime,missing_percentage<0.15)
intime_clean <- intime[,(colnames(intime) %in% intime_clean_cols$feature)]
outtime_clean <- outtime[,(colnames(outtime) %in% outtime_clean_cols$feature)]
sum(is.na(intime_clean))
sum(is.na(outtime_clean))
ncol(intime_clean)
ncol(intime)
ncol(outtime)
ncol(outtime_clean)
intime_clean[,2:ncol(intime_clean)] <- lapply(intime_clean[,2:ncol(intime_clean)], function(x) as_datetime(x))
outtime_clean[,2:ncol(outtime_clean)] <- lapply(outtime_clean[,2:ncol(outtime_clean)], function(x) as_datetime(x))
x<-outtime_clean[,2:ncol(outtime_clean)]-intime_clean[,2:ncol(intime_clean)]
x[,2:ncol(x)] <- lapply(x[,2:ncol(x)],function(x) as.numeric(x))
avg_hours <- rowMeans(x[,2:ncol(x)],na.rm = T)
bar_theme1<- theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position="none")
nrow(x)
length(avg_hours)
hrdata_mergd <- cbind(hrdata,avg_hours)
hrdata_mergd$overtime <- ifelse(hrdata_mergd$avg_hours>8,1,0)
hrdata_mergd$undertime <- ifelse(hrdata_mergd$avg_hours<7,1,0)
for(i in 1:ncol(x)){
hrdata_mergd$leaves[i] <- sum(is.na(x[i,]))
}
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~Attrition, data = hrdata_mergd))
hrdata_mergd$AttritionYes <- dummy_1$AttritionYes
hrdata_mergd$Attrition <- NULL
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~BusinessTravel, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
hrdata_mergd <- cbind(hrdata_mergd[,-3],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~Department, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
hrdata_mergd <- cbind(hrdata_mergd[,-3],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~Education, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
str(hrdata_mergd)
hrdata_mergd <- cbind(hrdata_mergd[,-4],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~EducationField, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
str(hrdata_mergd)
hrdata_mergd <- cbind(hrdata_mergd[,-4],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~Gender, data = hrdata_mergd))
str(hrdata_mergd)
hrdata_mergd$Gender <- NULL
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~JobRole, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
hrdata_mergd <- cbind(hrdata_mergd[,-5],dummy_1)
str(hrdata_mergd)
hrdata_mergd$GenderMale <- dummy_1$GenderMale
dummy_1 <- data.frame(model.matrix( ~MaritalStatus, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
str(hrdata_mergd)
hrdata_mergd <- cbind(hrdata_mergd[,-5],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~EnvironmentSatisfaction, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
str(hrdata_mergd)
hrdata_mergd <- cbind(hrdata_mergd[,-14],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~JobSatisfaction, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
str(hrdata_mergd)
hrdata_mergd <- cbind(hrdata_mergd[,-14],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~WorkLifeBalance, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
str(hrdata_mergd)
hrdata_mergd <- cbind(hrdata_mergd[,-14],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~JobInvolvement, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
hrdata_mergd <- cbind(hrdata_mergd[,-14],dummy_1)
str(hrdata_mergd)
dummy_1 <- data.frame(model.matrix( ~PerformanceRating, data = hrdata_mergd))
str(hrdata_mergd)
str(hrdata_mergd)
hrdata_mergd$PerformanceRatingOutstanding <- dummy_1$PerformanceRatingOutstanding
hrdata_mergd$PerformanceRating <- NULL
str(hrdata_mergd)
hrdata_mergd$JobLevel <- as.factor(hrdata_mergd$JobLevel)
dummy_1 <- data.frame(model.matrix( ~JobLevel, data = hrdata_mergd))
dummy_1 <- dummy_1[,-1]
str(hrdata_mergd)
hrdata_mergd <- cbind(hrdata_mergd[,-4],dummy_1)
str(hrdata_mergd)
ncol(hrdata_mergd)
ind<-c(2:16)
hr_analytics_scaled<-hrdata_mergd
for(i in ind)
{
hr_analytics_scaled[,i]<-scale(x=hrdata_mergd[,i],center = TRUE,scale = TRUE)
}
summary(hr_analytics_scaled)
set.seed(100)
indices = sample.split(hrdata_mergd$EmployeeID, SplitRatio = 0.7)
train = hr_analytics_scaled[indices,]
test = hr_analytics_scaled[-indices,]
model_1<-glm(AttritionYes~.,data=train,family = 'binomial')
model_keras <- keras_model_sequential()
model_keras %>%
# First hidden layer
layer_dense(
units              = 16,
kernel_initializer = "uniform",
activation         = "relu",
input_shape        = ncol(train)) %>%
# Dropout to prevent overfitting
layer_dropout(rate = 0.1) %>%
# Second hidden layer
layer_dense(
units              = 16,
kernel_initializer = "uniform",
activation         = "relu") %>%
# Dropout to prevent overfitting
layer_dropout(rate = 0.1) %>%
# Output layer
layer_dense(
units              = 1,
kernel_initializer = "uniform",
activation         = "sigmoid") %>%
# Compile ANN
compile(
optimizer = 'adam',
loss      = 'binary_crossentropy',
metrics   = c('accuracy')
)
model_keras
fit_keras <- fit(
object           = model_keras,
x                = as.matrix(train),
y                = train$AttritionYes,
batch_size       = 50,
epochs           = 35,
validation_split = 0.30
)
fit_keras <- fit(
object           = model_keras,
x                = as.matrix(train),
y                = train$AttritionYes,
batch_size       = 50,
epochs           = 35,
validation_split = 0.30
)
install_keras()
